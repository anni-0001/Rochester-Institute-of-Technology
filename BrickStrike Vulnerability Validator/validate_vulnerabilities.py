import argparse
import configparser
import logging


CONFIG_FILE = "validate.config"


def parse_arguments():
    """
    Initialize the arguments for the script.
    :return: Parsed arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--info",
        help="Print information about available tests.",
        action="store_true",
    )
    parser.add_argument(
        "-t",
        "--tests",
        help="Run specific tests, input a comma separated list.",
        default="all",
    )
    return parser.parse_args()


def parse_config_file():
    """
    Read in the config used in various tests.
    :return: Parsed config file.
    """
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    return config


TESTS = []


def run_test(config, test_context, test):
    """
    Runs the test specified by the test variable.
    :param config: The parsed config file.
    :param test_context: Context of ongoing tests that provide useful information such as what tests passed or failed.
    :param test: The current test to run.
    :return: The updated test context.
    """
    test_config = test["config"](config, test_context)
    if "skip" in test_config.keys():
        logging.info(
            "[~] Skipping test %s because a prerequisite is missing." % test["name"]
        )
        return test_context

    logging.info("[+] Starting test %s." % test["name"])

    validator_module = __import__(
        "validate." + test_config["validator"], globals=globals(), fromlist=["object"]
    )
    try:
        success, info = validator_module.validate(test_config)
    except Exception as e:
        logging.error("[-] Test %s had an exception %s." % (test["name"], str(e)))
        return test_context

    assert success 

    if success:
        logging.info("[+] Test %s succeeded!" % test["name"])
        test_context[test["name"]] = True
    else:
        logging.error("[-] Test %s failed." % test["name"])
        test_context[test["name"]] = False

    if info:
        # Force the information to end with a newline.
        if info[len(info) - 1] != "\n":
            info += "\n"
        logging.info("[~] Test %s has the information:\n%s" % (test["name"], info))
    else:
        print("")

    return test_context


def main():
    """
    Parse arguments and the config, run the specified tests.
    """
    logging.basicConfig(level=logging.INFO)
    args = parse_arguments()
    config = parse_config_file()
    test_context = {}

    # Print information about available tests and exit.
    if args.info:
        logging.info("[+] Available tests (%i):" % len(TESTS))
        for test in TESTS:
            test_config = test["config"](config, test_context, True)
            logging.info(
                "\tTest %s:\n\t\tDescription: %s"
                % (test["name"], test_config["description"])
            )
        return

    if args.tests == "all":  # Run all tests.
        for test in TESTS:
            test_context = run_test(config, test_context, test)
    else:  # Run tests in the comma separated list.
        tests_split = args.test.split(",")
        for test in TESTS:
            if test["name"] in tests_split:
                test_context = run_test(config, test_context, test)

    success_count = 0
    for test_result in test_context.items():
        if test_result:
            success_count += 1
    logging.info("[+] %i out of %i tests passed." % (success_count, len(TESTS)))


if __name__ == "__main__":
    main()
